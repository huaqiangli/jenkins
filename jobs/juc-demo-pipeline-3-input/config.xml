<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.15">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.2.4">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>BUILD_PARA</string>
        <string>RUN_PMD_TEST</string>
      </parameters>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
    <io.jenkins.blueocean.service.embedded.BlueOceanUrlAction plugin="blueocean-rest-impl@1.3.2">
      <blueOceanUrlObject class="io.jenkins.blueocean.service.embedded.BlueOceanUrlObjectImpl">
        <mappedUrl>blue/organizations/jenkins/juc-demo-pipeline-3-input</mappedUrl>
        <modelObject class="flow-definition" reference="../../../.."/>
      </blueOceanUrlObject>
    </io.jenkins.blueocean.service.embedded.BlueOceanUrlAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.1">
      <gitLabConnection></gitLabConnection>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_PARA</name>
          <description>Parameters which will be passed to build command</description>
          <defaultValue>-j 16</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RUN_PMD_TEST</name>
          <description>Whether trigger PMD check.</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.41">
    <script>pipeline {
    agent any
    options {
    	timestamps()
    }
    parameters {
    	string(name: &apos;BUILD_PARA&apos;, defaultValue: &apos;-j 16&apos;, description: &apos;Parameters which will be passed to build command&apos;)
    	booleanParam(name: &apos;RUN_PMD_TEST&apos;, defaultValue: true, description: &apos;Whether trigger PMD check.&apos;)
    }
    environment {
    	RUN_PMD_TEST = &quot;${params.RUN_PMD_TEST}&quot;
    }
    stages {
        stage(&apos;Build&apos;) {
            steps {
            	sh &apos;printenv&apos;
                echo &apos;This is a build step.&apos;
                echo &quot;Build parameters is ${BUILD_PARA}&quot;
            }
        }
        stage(&apos;Test&apos;) {
        	parallel {
        		stage(&apos;Unit Test&apos;) {
        			steps {
        				sh &apos;&apos;&apos;
        					echo &apos;This is a unit test step.&apos;
        					if [ ! -d testreport ];then
        						mkdir testreport
        					fi
        					# Clean up old test report
        					rm -rf testreport/*
        					echo &quot;success&quot; &gt; testreport/test-report.html
        				&apos;&apos;&apos;
        				stash includes: &apos;**/testreport/*.html&apos;, name: &apos;report&apos;
        			}
        		}
        		stage(&apos;Code Static Check&apos;) {
        			steps {
        				echo &apos;This is a code static check step.&apos;
        			}
        		}
        	}
        }
		stage(&apos;PMD Check&apos;) {
			when {
				environment name: &apos;RUN_PMD_TEST&apos;, value: &apos;true&apos;
			}
			steps {
				echo &apos;This is a PMD check step.&apos;
			}
		}
		stage(&apos;UAT Test&apos;) {
			steps {
				echo &apos;This is a UAT test step.&apos;
				script {
					def targetPlatform = [&apos;Windowns&apos;, &apos;Unix&apos;, &apos;MaxOS&apos;]
					for (int i=0; i&lt;targetPlatform.size(); i++) {
						echo &quot;Testing on platform ${targetPlatform[i]}.&quot;
					}
				}
			}
		}
        stage(&apos;Deploy&apos;) {
            steps {
                echo &apos;This is a deploy step.&apos;
                script {
          			env.RELEASE_SCOPE = input message: &apos;请选择发布类型：&apos;, ok: &apos;Release!&apos;,
          			parameters: [choice(name: &apos;RELEASE_SCOPE&apos;, choices: &apos;开发环境\n测试环境\n生产环境&apos;, description: &apos;请选择此次发布的类型。&apos;)]
        		}
                echo &quot;This is a deploy step to ${env.RELEASE_SCOPE}.&quot;
                unstash &apos;report&apos;
                archiveArtifacts allowEmptyArchive: true, artifacts: &apos;**/testreport/*.html&apos;, fingerprint: true
            }
            post {
	        	failure {
        			echo &quot;Pipeline failed, warn someone ASAP.&quot;
	        	}
	        	success {
        			echo &quot;Success deploy and trigger another pipeline.&quot;
        			//build &apos;juc-demo-pipeline-1-simple&apos;
	        	}
	        	aborted {
        			echo &quot;Pipeline has been aborted.&quot;
        			echo &quot;Clean up some local file.&quot;
	        	}
	        }
        }
    }
    post {
    	always {
    		echo &quot;Thank you for trying pipeline sample.&quot;
    	}
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>